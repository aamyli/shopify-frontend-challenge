{"version":3,"sources":["components/PhotoCard.js","App.js","reportWebVitals.js","index.js"],"names":["PhotoCard","title","date","desc","type","url","liked","useState","hasLiked","like","setLike","className","src","href","Button","variant","onClick","API_KEY","startDate","endDate","a","startFormat","toISOString","slice","endFormat","console","log","fetch","response","json","data","App","Date","addDays","key","setDate","result","setResult","id","onChange","item","selection","maxDate","showSelectionPreview","moveRangeOnFirstSelection","months","ranges","direction","preventSnapRefocus","calendarFocus","fetchAPI","then","parsed_results","forEach","d","res","explanation","media_type","push","map","index","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ab6b746.chunk.js","sourcesContent":["import React from \"react\"\nimport ReactPlayer from \"react-player\"\nimport { useState } from 'react';\nimport \"../styles/photocard.css\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport { Button } from 'react-bootstrap';\n\n\nconst img = \"image\"\nconst vid = \"video\"\n\nconst PhotoCard = ({ title, date, desc, type, url, liked }) => {\n    \n    const [like, setLike] = useState([\n    {\n        hasLiked: liked\n    }\n    ]);\n\n  return (\n    <div className=\"card\">\n        <div className=\"graphic\">\n            { type == img ? (\n                <img className=\"pic\" src={url}></img>\n            ) : (\n                <ReactPlayer className=\"vid\" url={url}/>\n            )}\n        </div>\n        <div className=\"text\">\n            <h1>{title}</h1>\n            <h3>{date} | <a href={url}><i>🔗 to view full</i></a></h3>\n            <p>{desc}</p>\n            <br />\n            <Button variant=\"light\" onClick={() => setLike({hasLiked: !like.hasLiked})}> \n            {\n                like.hasLiked ? (\n                    <p>unlike 💔</p>\n                ) : (\n                    <p>like ❤️</p>\n                )\n            }\n            </Button>\n            <p className=\"divider\">- - ✨ - -</p>\n        </div>\n    </div>\n  )\n}\n\nexport default PhotoCard","import React from 'react';\n\nimport PhotoCard from './components/PhotoCard';\n\nimport { DateRangePicker } from 'react-date-range';\nimport { addDays } from 'date-fns';\nimport { useState } from 'react';\nimport { Button } from 'react-bootstrap';\n\nimport './App.css';\nimport 'react-date-range/dist/styles.css';\nimport 'react-date-range/dist/theme/default.css'; \nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nconst API_KEY = \"P8VLfFu4GWnTCbJSxagVfhtaUHSC6XPIhFJ8p242\";\n\n// fetches photos of the day between startDate and endDate from NASA's APOD API\nasync function fetchAPI(startDate, endDate) {\n  const startFormat = startDate.toISOString().slice(0, 10);\n  const endFormat = endDate.toISOString().slice(0, 10);\n  const url = \"https://api.nasa.gov/planetary/apod?api_key=\" + API_KEY + \"&start_date=\" + startFormat + \"&end_date=\" + endFormat;\n  console.log(url);\n  const response = await fetch(url);\n  const data = await response.json();\n  return data;\n} \n\nfunction App() {\n  // sets state for dates\n  const [date, setDate] = useState([\n    {\n      startDate: new Date(),\n      endDate: addDays(new Date(), 0),\n      key: 'selection'\n    }\n  ]);\n\n  // sets state for results from APOD API\n  const [result, setResult] = useState([\n    {\n      title: null,\n      date: null,\n      desc: null,\n      type: null,\n      url: null,\n      liked: false\n    }\n  ]);\n\n  // when button is triggered, the API is called and results are updated\n  function updateResult() {\n    fetchAPI(date[0].startDate, date[0].endDate).then(data => {\n      const parsed_results = [];\n      data.forEach((d) => {\n        const res = {\n          title: d.title,\n          date: d.date,\n          desc: d.explanation,\n          type: d.media_type,\n          url: d.url,\n          liked: false\n        }\n        parsed_results.push(res);\n      });\n      \n      setResult(parsed_results);\n      console.log(result);\n    })\n  }\n\n  return (\n    <div className=\"App\">\n      \n      <div className=\"title\">\n        <h1 className=\"nasa\">NASA/<b>SPACESTAGRAM</b></h1>\n        <p className=\"credit\">📸 photos taken from <b><a href=\"https://api.nasa.gov/#apod\">NASA's APOD API</a></b></p>\n        <p className=\"quote\">\n          “<b className=\"focus\">Remember to look up at the stars and not down at your feet.</b> \n          <br />\n          Try to make sense of what you see and wonder about what makes the universe exist. Be curious. And however difficult life may seem, there is always something you can do and succeed at.\n          <br />\n          <i>It matters that you don't just give up.</i>”\n          <br />\n          <b className=\"author\">STEPHEN HAWKING</b>\n        </p>\n        <br />\n        <p>🛰 ✨ 🪐</p>\n        <br />\n        <a href=\"#start\"><Button className=\"scroll\" variant=\"outline-warning\">enter the gallery</Button></a>\n      </div>\n      \n      <a id=\"start\">\n        <div className=\"date-picker\">\n          <p className=\"instructions\">first, select a date range you want to view from</p>\n          <DateRangePicker\n            className=\"calendar\"\n            onChange={item => setDate([item.selection])}\n            maxDate={addDays(new Date(), 0)}\n            showSelectionPreview={true}\n            moveRangeOnFirstSelection={false}\n            months={2}\n            ranges={date}\n            direction=\"horizontal\"\n            preventSnapRefocus={true}\n            calendarFocus=\"backwards\"\n          />\n          <br />\n          <a href=\"#gallery\"><Button className=\"date-button\" variant=\"outline-light\" onClick={updateResult}>go 🚀🌙</Button></a>\n        </div>\n      </a>\n\n      <a id=\"gallery\">\n        <div className=\"photos\">\n          { result[0].title == null ? (\n            <div></div>\n          ) : (\n            result.map((res, index) => (\n              <PhotoCard\n                key={index}\n                title={res.title}\n                date={res.date}\n                desc={res.desc}\n                type={res.type}\n                url={res.url}\n                liked={res.liked}\n              ></PhotoCard>\n            ))\n          )\n          }\n        </div>\n      </a>\n\n      <div className=\"footer\"></div>\n    </div>\n  );\n}\n\nexport default App;\n\n      {/* <p> start date : {JSON.stringify(date[0].startDate)} </p>\n      <p> end date : {JSON.stringify(date[0].endDate)} </p> */}\n\n      {/* <FetchImage></FetchImage> */}\n      {/* <button onClick={buttonState}> Get Pictures </button> */}\n      {/* <p> result : {JSON.stringify(result)} </p> */}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}